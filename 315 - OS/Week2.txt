Pointer - A pointer is a cariable that stores the memory address of something.

	   Memory   Address
x    	90       1234
y    	12       1235
z    	19	     1236
p		1234	 1237
a[0]	25	  	 1238
a[1]	38	  	 1239
a[2]	-6	   	 1240
w			  	 1241


int x;
int y;
x = 7;
y = 12;
z = x + y;
int *p 			//Declare pointer //Pointer is type int*
p = &x 			//& = addressOf
*p = 85;  	    // '*' derefrencing  -  Put that value in the place that p points
z = *p + 5;     //Go to memory address p points to and bring it back to expression then add 5
int a[3] = {25, 38, -6}; //Array of size 3 // Datatype of a is a pointer pointing to an int // a stores the memory address of the 1st array element
int w;

Can do pointer arithmatic
	- a + 1 will return the memory location 1 after a
	- *(a + 1) will return value 38  // *(a + 1) == a[1]

		Memory	Address
b[0][0]	  11	  1400
b[0][1]	  22 	  1401
b[0][2]	  33	  1402
b[0][3]	  44	  1403
b[1][0]	  111	  1404
b[1][1]	  122	  1405
b[1][2]	  133	  1406
b[1][3]   144     1407
b[2][0]   211     1408
......


int b[3][4] = {{11,22,33,44}, {111,122,133,144}, {211,222,233,244}};
What datatype is b? - int**

Want to refer to 144?
	*(b + 1) points to b[1][0] -- Goes to b[1][0] instead of b[0][1] because b holds 3 arrays so adding one we go to next array
	*(*(b + 1) + 3) Points to b[1][3] -- Points to the int 144


NO BOUND CHECKING IN C 
int arr[3];
arr[13] = 5;     //Nothing stops me from doing this, just writes 5 in memory 13 after arr[0]
-------------------------------------------------------------------------------------------------------------------
C - Style Strings

-There is no string datatype in C
-NEVER use the word string in labs
-Char arrays are used to store "Strings"
		char name[5];
		name[0] = 'Z';
		name[1] = 'a';
		name[2] = 'n';
		name[3] = 'e';
		name[4] = '\0'; // '\0' = null //Need this at end of char array so it knows where to end

		char name[] = "bob"; OR
		char name[4] = "bob";
--------------------------------------------------------------------------------------------------------------------
String Functions --    #include<stdio.h>
	strlen(s) - returns length of string -- DOES NOT include null character
	strcpy(destination, source) - Copies string from source to destination

struct Data type - Custom structure (Similar to object)
	struct foo {
		int x;
		char* str;
		char name[10];
		struct foo *next;
	};
	int main(){
		struct foo f;
		struct foo f2;
		f.x = 27;
		strcpy(f.name, "Alice");
		printf("f.x = %d \n", f.x);
		f.next = &f2;

		f2.x = 55;
		f.next.x = 55; NOT ALLOWED .x
		(*f.next).x = 55; ALLOWED. Need to dereference f.next
		f.next->x = 55; Same as above just less clunky
						//Segmentation fault error means pointer trying to point somewhere we aint allowed
		return 0;

		free(f.next->str);
		free(f.next)
	}

	f.next = (struct foo*)malloc(sizeOf(struct foo));  //Making linked list so it can increase in size
													   //Must cast whatever malloc returns to the data type were assigning it to

	//This Should be at the top//
struct foo* makeFoo(int n, char s[]){
	struct foo* f;
	f = (struct foo*)malloc(sizeOf(struct foo));
	f->x = n;
	f->str = (char*)malloc(sizeOf(char)) * (strlen(s)) + 1; // + 1  for null character
	strcpy(f->str, s);
	return f;
}

malloc reserves memory in the heap
most variables on stack and f->next pointer on stack but points to heap
-----------------------------------------------------------------------------------------------------------------

Operating Systems

       CPU                  Mouse
	    |                     |
+-------------------------------------------+ (System Bus)	
    |              |
  Memory        Keyboard

-------------------------------------------------------------------------------------------------------------------
Terms 

Multiprogramming OS - Operating system that is capable of having multiple programs in memory at the same time - Old Term, all PC's do this
TimeSharing OS - Multiprogramming OS that can switch between so quick the programs think theyre running on their own system
Program - A program loaded into memory and executable
Job Pool - The set of jobs waiting to be loaded into memory. Like a request to the system
CPU Scheduling - OS making decisions about which process should be on the CPU.
Swapping - CPU scheduler decides to move a process from memory to disk to allow another process to be ran
Single processor system - Multiple cpu's for executing processes

Many Processes -> Shared hardware
	-Problem: How to prevent process A from interfering with process B.
	-A and B want to use printer at the same time
	-A writes to B's area of memory

Build CPU's with 2 modes (Mode bit)
	-bit = 0 (kernel mode)
	-bit = 1 (user mode)
	If a user process tries a priviliged operation, "trap" to the OS

Types of system calls
	-File management - create(), delete(), open(), read,write,...
	-Device management - request, rebase, read, write, ...
	-Communication - create, delete, send, receive, ...
	-Process management - create, abort, end, ... 